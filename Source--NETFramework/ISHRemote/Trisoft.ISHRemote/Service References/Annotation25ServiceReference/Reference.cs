//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trisoft.ISHRemote.Annotation25ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
    [System.SerializableAttribute()]
    public partial class InfoShareFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InfoShareErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLDetailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InfoShareErrorNumber {
            get {
                return this.InfoShareErrorNumberField;
            }
            set {
                if ((this.InfoShareErrorNumberField.Equals(value) != true)) {
                    this.InfoShareErrorNumberField = value;
                    this.RaisePropertyChanged("InfoShareErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLDetail {
            get {
                return this.XMLDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLDetailField, value) != true)) {
                    this.XMLDetailField = value;
                    this.RaisePropertyChanged("XMLDetail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", ConfigurationName="Annotation25ServiceReference.Annotation")]
    public interface Annotation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Create", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateInfoSh" +
            "areFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="returnValue")]
        string Create(string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Create", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateRespon" +
            "se")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="returnValue")]
        System.Threading.Tasks.Task<string> CreateAsync(string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Delete", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteInfoSh" +
            "areFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void Delete(string annotationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Delete", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteRespon" +
            "se")]
        System.Threading.Tasks.Task DeleteAsync(string annotationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Update", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateInfoSh" +
            "areFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void Update(string annotationId, string xmlMetadata, string xmlRequiredCurrentMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Update", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateRespon" +
            "se")]
        System.Threading.Tasks.Task UpdateAsync(string annotationId, string xmlMetadata, string xmlRequiredCurrentMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/RetrieveMeta" +
            "data", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/RetrieveMeta" +
            "dataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/RetrieveMeta" +
            "dataInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string RetrieveMetadata(string[] annotationIds, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/RetrieveMeta" +
            "data", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/RetrieveMeta" +
            "dataResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> RetrieveMetadataAsync(string[] annotationIds, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Find", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/FindResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/FindInfoShar" +
            "eFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string Find(string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/Find", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/FindResponse" +
            "")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> FindAsync(string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateReply", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateReplyR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateReplyI" +
            "nfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="returnValue")]
        long CreateReply(string annotationId, string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateReply", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/CreateReplyR" +
            "esponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="returnValue")]
        System.Threading.Tasks.Task<long> CreateReplyAsync(string annotationId, string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateReply", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateReplyR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateReplyI" +
            "nfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void UpdateReply(long replyRef, string xmlMetadata, string xmlRequiredCurrentMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateReply", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/UpdateReplyR" +
            "esponse")]
        System.Threading.Tasks.Task UpdateReplyAsync(long replyRef, string xmlMetadata, string xmlRequiredCurrentMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteReply", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteReplyR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.Annotation25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteReplyI" +
            "nfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void DeleteReply(long replyRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteReply", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/Annotation/DeleteReplyR" +
            "esponse")]
        System.Threading.Tasks.Task DeleteReplyAsync(long replyRef);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AnnotationChannel : Trisoft.ISHRemote.Annotation25ServiceReference.Annotation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotationClient : System.ServiceModel.ClientBase<Trisoft.ISHRemote.Annotation25ServiceReference.Annotation>, Trisoft.ISHRemote.Annotation25ServiceReference.Annotation {
        
        public AnnotationClient() {
        }
        
        public AnnotationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Create(string xmlMetadata) {
            return base.Channel.Create(xmlMetadata);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(string xmlMetadata) {
            return base.Channel.CreateAsync(xmlMetadata);
        }
        
        public void Delete(string annotationId) {
            base.Channel.Delete(annotationId);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string annotationId) {
            return base.Channel.DeleteAsync(annotationId);
        }
        
        public void Update(string annotationId, string xmlMetadata, string xmlRequiredCurrentMetadata) {
            base.Channel.Update(annotationId, xmlMetadata, xmlRequiredCurrentMetadata);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string annotationId, string xmlMetadata, string xmlRequiredCurrentMetadata) {
            return base.Channel.UpdateAsync(annotationId, xmlMetadata, xmlRequiredCurrentMetadata);
        }
        
        public string RetrieveMetadata(string[] annotationIds, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveMetadata(annotationIds, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveMetadataAsync(string[] annotationIds, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveMetadataAsync(annotationIds, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string Find(string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.Find(xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> FindAsync(string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.FindAsync(xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public long CreateReply(string annotationId, string xmlMetadata) {
            return base.Channel.CreateReply(annotationId, xmlMetadata);
        }
        
        public System.Threading.Tasks.Task<long> CreateReplyAsync(string annotationId, string xmlMetadata) {
            return base.Channel.CreateReplyAsync(annotationId, xmlMetadata);
        }
        
        public void UpdateReply(long replyRef, string xmlMetadata, string xmlRequiredCurrentMetadata) {
            base.Channel.UpdateReply(replyRef, xmlMetadata, xmlRequiredCurrentMetadata);
        }
        
        public System.Threading.Tasks.Task UpdateReplyAsync(long replyRef, string xmlMetadata, string xmlRequiredCurrentMetadata) {
            return base.Channel.UpdateReplyAsync(replyRef, xmlMetadata, xmlRequiredCurrentMetadata);
        }
        
        public void DeleteReply(long replyRef) {
            base.Channel.DeleteReply(replyRef);
        }
        
        public System.Threading.Tasks.Task DeleteReplyAsync(long replyRef) {
            return base.Channel.DeleteReplyAsync(replyRef);
        }
    }
}
