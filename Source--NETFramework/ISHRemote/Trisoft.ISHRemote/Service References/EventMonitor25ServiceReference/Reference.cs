//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trisoft.ISHRemote.EventMonitor25ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
    [System.SerializableAttribute()]
    public partial class InfoShareFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InfoShareErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLDetailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InfoShareErrorNumber {
            get {
                return this.InfoShareErrorNumberField;
            }
            set {
                if ((this.InfoShareErrorNumberField.Equals(value) != true)) {
                    this.InfoShareErrorNumberField = value;
                    this.RaisePropertyChanged("InfoShareErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLDetail {
            get {
                return this.XMLDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLDetailField, value) != true)) {
                    this.XMLDetailField = value;
                    this.RaisePropertyChanged("XMLDetail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventLevel", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum EventLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exception = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Configuration = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Verbose = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Debug = 60,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProgressStatusFilter", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum ProgressStatusFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 15,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserFilter", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum UserFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Current = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProgressStatus", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum ProgressStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Calculate = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DetailStatus", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum DetailStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDataType", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum EventDataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        String = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        List = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xml = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SendEventData = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogObject = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StatusReport = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CommandOutput = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", ConfigurationName="EventMonitor25ServiceReference.EventMonitor")]
    public interface EventMonitor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetProgres" +
            "sId", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetProgres" +
            "sIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetProgres" +
            "sIdInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="returnValue")]
        long GetProgressId(string eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetProgres" +
            "sId", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetProgres" +
            "sIdResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="returnValue")]
        System.Threading.Tasks.Task<long> GetProgressIdAsync(string eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetEventDe" +
            "tail", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetEventDe" +
            "tailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetEventDe" +
            "tailInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        string GetEventDetail(long detailId, string xmlRequestedMetadata, bool includeData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetEventDe" +
            "tail", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetEventDe" +
            "tailResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        System.Threading.Tasks.Task<string> GetEventDetailAsync(long detailId, string xmlRequestedMetadata, bool includeData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetNextEve" +
            "ntDetailDataChunk", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetNextEve" +
            "ntDetailDataChunkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetNextEve" +
            "ntDetailDataChunkInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkResponse GetNextEventDetailDataChunk(Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetNextEve" +
            "ntDetailDataChunk", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/GetNextEve" +
            "ntDetailDataChunkResponse")]
        System.Threading.Tasks.Task<Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkResponse> GetNextEventDetailDataChunkAsync(Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/StartEvent" +
            "", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/StartEvent" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/StartEvent" +
            "InfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventResponse StartEvent(Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/StartEvent" +
            "", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/StartEvent" +
            "Response")]
        System.Threading.Tasks.Task<Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventResponse> StartEventAsync(Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/DeleteByPr" +
            "ogressId", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/DeleteByPr" +
            "ogressIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/DeleteByPr" +
            "ogressIdInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void DeleteByProgressId(long progressId, bool deleteFailedEvents, bool deleteBusyEvents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/DeleteByPr" +
            "ogressId", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/DeleteByPr" +
            "ogressIdResponse")]
        System.Threading.Tasks.Task DeleteByProgressIdAsync(long progressId, bool deleteFailedEvents, bool deleteBusyEvents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByProgressIds", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByProgressIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByProgressIdsInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        string RetrieveEventsByProgressIds(long[] progressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByProgressIds", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByProgressIdsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        System.Threading.Tasks.Task<string> RetrieveEventsByProgressIdsAsync(long[] progressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByParentProgressIds", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByParentProgressIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByParentProgressIdsInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        string RetrieveEventsByParentProgressIds(long[] parentProgressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel levelFilter, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByParentProgressIds", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entsByParentProgressIdsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        System.Threading.Tasks.Task<string> RetrieveEventsByParentProgressIdsAsync(long[] parentProgressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel levelFilter, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entOverview", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entOverviewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entOverviewInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        string RetrieveEventOverview(string[] eventTypes, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatusFilter statusFilter, System.DateTime modifiedSince, Trisoft.ISHRemote.EventMonitor25ServiceReference.UserFilter userFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entOverview", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/RetrieveEv" +
            "entOverviewResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlEventList")]
        System.Threading.Tasks.Task<string> RetrieveEventOverviewAsync(string[] eventTypes, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatusFilter statusFilter, System.DateTime modifiedSince, Trisoft.ISHRemote.EventMonitor25ServiceReference.UserFilter userFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/EndEvent", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/EndEventRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/EndEventIn" +
            "foShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void EndEvent(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatus status, int currentProgress, int maximumProgress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/EndEvent", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/EndEventRe" +
            "sponse")]
        System.Threading.Tasks.Task EndEventAsync(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatus status, int currentProgress, int maximumProgress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tail", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="detailId")]
        long AddEventDetail(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tail", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="detailId")]
        System.Threading.Tasks.Task<long> AddEventDetailAsync(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailWithProgress", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailWithProgressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.EventMonitor25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailWithProgressInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="detailId")]
        long AddEventDetailWithProgress(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data, int currentProgress, int maximumProgress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailWithProgress", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/EventMonitor/AddEventDe" +
            "tailWithProgressResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="detailId")]
        System.Threading.Tasks.Task<long> AddEventDetailWithProgressAsync(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data, int currentProgress, int maximumProgress);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNextEventDetailDataChunk", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class GetNextEventDetailDataChunkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public long detailId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public long offSet;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=2)]
        public int size;
        
        public GetNextEventDetailDataChunkRequest() {
        }
        
        public GetNextEventDetailDataChunkRequest(long detailId, long offSet, int size) {
            this.detailId = detailId;
            this.offSet = offSet;
            this.size = size;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNextEventDetailDataChunkResponse", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class GetNextEventDetailDataChunkResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public long offSet;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public int size;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=2)]
        public byte[] bytes;
        
        public GetNextEventDetailDataChunkResponse() {
        }
        
        public GetNextEventDetailDataChunkResponse(long offSet, int size, byte[] bytes) {
            this.offSet = offSet;
            this.size = size;
            this.bytes = bytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StartEvent", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class StartEventRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public string eventType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public string description;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=2)]
        public long parentProgressId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=3)]
        public int maximumProgress;
        
        public StartEventRequest() {
        }
        
        public StartEventRequest(string eventType, string description, long parentProgressId, int maximumProgress) {
            this.eventType = eventType;
            this.description = description;
            this.parentProgressId = parentProgressId;
            this.maximumProgress = maximumProgress;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StartEventResponse", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class StartEventResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public string eventId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public long progressId;
        
        public StartEventResponse() {
        }
        
        public StartEventResponse(string eventId, long progressId) {
            this.eventId = eventId;
            this.progressId = progressId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EventMonitorChannel : Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventMonitorClient : System.ServiceModel.ClientBase<Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor>, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor {
        
        public EventMonitorClient() {
        }
        
        public EventMonitorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventMonitorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventMonitorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventMonitorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long GetProgressId(string eventId) {
            return base.Channel.GetProgressId(eventId);
        }
        
        public System.Threading.Tasks.Task<long> GetProgressIdAsync(string eventId) {
            return base.Channel.GetProgressIdAsync(eventId);
        }
        
        public string GetEventDetail(long detailId, string xmlRequestedMetadata, bool includeData) {
            return base.Channel.GetEventDetail(detailId, xmlRequestedMetadata, includeData);
        }
        
        public System.Threading.Tasks.Task<string> GetEventDetailAsync(long detailId, string xmlRequestedMetadata, bool includeData) {
            return base.Channel.GetEventDetailAsync(detailId, xmlRequestedMetadata, includeData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkResponse Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor.GetNextEventDetailDataChunk(Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkRequest request) {
            return base.Channel.GetNextEventDetailDataChunk(request);
        }
        
        public byte[] GetNextEventDetailDataChunk(long detailId, ref long offSet, ref int size) {
            Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkRequest inValue = new Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkRequest();
            inValue.detailId = detailId;
            inValue.offSet = offSet;
            inValue.size = size;
            Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkResponse retVal = ((Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor)(this)).GetNextEventDetailDataChunk(inValue);
            offSet = retVal.offSet;
            size = retVal.size;
            return retVal.bytes;
        }
        
        public System.Threading.Tasks.Task<Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkResponse> GetNextEventDetailDataChunkAsync(Trisoft.ISHRemote.EventMonitor25ServiceReference.GetNextEventDetailDataChunkRequest request) {
            return base.Channel.GetNextEventDetailDataChunkAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventResponse Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor.StartEvent(Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventRequest request) {
            return base.Channel.StartEvent(request);
        }
        
        public string StartEvent(string eventType, string description, long parentProgressId, int maximumProgress, out long progressId) {
            Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventRequest inValue = new Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventRequest();
            inValue.eventType = eventType;
            inValue.description = description;
            inValue.parentProgressId = parentProgressId;
            inValue.maximumProgress = maximumProgress;
            Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventResponse retVal = ((Trisoft.ISHRemote.EventMonitor25ServiceReference.EventMonitor)(this)).StartEvent(inValue);
            progressId = retVal.progressId;
            return retVal.eventId;
        }
        
        public System.Threading.Tasks.Task<Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventResponse> StartEventAsync(Trisoft.ISHRemote.EventMonitor25ServiceReference.StartEventRequest request) {
            return base.Channel.StartEventAsync(request);
        }
        
        public void DeleteByProgressId(long progressId, bool deleteFailedEvents, bool deleteBusyEvents) {
            base.Channel.DeleteByProgressId(progressId, deleteFailedEvents, deleteBusyEvents);
        }
        
        public System.Threading.Tasks.Task DeleteByProgressIdAsync(long progressId, bool deleteFailedEvents, bool deleteBusyEvents) {
            return base.Channel.DeleteByProgressIdAsync(progressId, deleteFailedEvents, deleteBusyEvents);
        }
        
        public string RetrieveEventsByProgressIds(long[] progressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveEventsByProgressIds(progressIds, level, lastDetailId, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveEventsByProgressIdsAsync(long[] progressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveEventsByProgressIdsAsync(progressIds, level, lastDetailId, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string RetrieveEventsByParentProgressIds(long[] parentProgressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel levelFilter, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveEventsByParentProgressIds(parentProgressIds, levelFilter, lastDetailId, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveEventsByParentProgressIdsAsync(long[] parentProgressIds, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel levelFilter, long lastDetailId, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveEventsByParentProgressIdsAsync(parentProgressIds, levelFilter, lastDetailId, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string RetrieveEventOverview(string[] eventTypes, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatusFilter statusFilter, System.DateTime modifiedSince, Trisoft.ISHRemote.EventMonitor25ServiceReference.UserFilter userFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveEventOverview(eventTypes, statusFilter, modifiedSince, userFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveEventOverviewAsync(string[] eventTypes, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatusFilter statusFilter, System.DateTime modifiedSince, Trisoft.ISHRemote.EventMonitor25ServiceReference.UserFilter userFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveEventOverviewAsync(eventTypes, statusFilter, modifiedSince, userFilter, xmlRequestedMetadata);
        }
        
        public void EndEvent(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatus status, int currentProgress, int maximumProgress) {
            base.Channel.EndEvent(progressId, status, currentProgress, maximumProgress);
        }
        
        public System.Threading.Tasks.Task EndEventAsync(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.ProgressStatus status, int currentProgress, int maximumProgress) {
            return base.Channel.EndEventAsync(progressId, status, currentProgress, maximumProgress);
        }
        
        public long AddEventDetail(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data) {
            return base.Channel.AddEventDetail(progressId, level, action, description, status, dataType, data);
        }
        
        public System.Threading.Tasks.Task<long> AddEventDetailAsync(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data) {
            return base.Channel.AddEventDetailAsync(progressId, level, action, description, status, dataType, data);
        }
        
        public long AddEventDetailWithProgress(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data, int currentProgress, int maximumProgress) {
            return base.Channel.AddEventDetailWithProgress(progressId, level, action, description, status, dataType, data, currentProgress, maximumProgress);
        }
        
        public System.Threading.Tasks.Task<long> AddEventDetailWithProgressAsync(long progressId, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventLevel level, string action, string description, Trisoft.ISHRemote.EventMonitor25ServiceReference.DetailStatus status, Trisoft.ISHRemote.EventMonitor25ServiceReference.EventDataType dataType, byte[] data, int currentProgress, int maximumProgress) {
            return base.Channel.AddEventDetailWithProgressAsync(progressId, level, action, description, status, dataType, data, currentProgress, maximumProgress);
        }
    }
}
