//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trisoft.ISHRemote.User25ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
    [System.SerializableAttribute()]
    public partial class InfoShareFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InfoShareErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLDetailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InfoShareErrorNumber {
            get {
                return this.InfoShareErrorNumberField;
            }
            set {
                if ((this.InfoShareErrorNumberField.Equals(value) != true)) {
                    this.InfoShareErrorNumberField = value;
                    this.RaisePropertyChanged("InfoShareErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLDetail {
            get {
                return this.XMLDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLDetailField, value) != true)) {
                    this.XMLDetailField = value;
                    this.RaisePropertyChanged("XMLDetail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityFilter", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Enumerations/API25/")]
    public enum ActivityFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", ConfigurationName="User25ServiceReference.User")]
    public interface User {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataByIshUs" +
            "erRef", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataByIshUs" +
            "erRefResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataByIshUs" +
            "erRefInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string GetMetadataByIshUserRef(long userRef, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataByIshUs" +
            "erRef", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataByIshUs" +
            "erRefResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> GetMetadataByIshUserRefAsync(long userRef, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadata", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataInfoSha" +
            "reFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string GetMetadata(string userId, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadata", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMetadataRespons" +
            "e")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> GetMetadataAsync(string userId, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMyMetadata", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMyMetadataRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMyMetadataInfoS" +
            "hareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string GetMyMetadata(string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMyMetadata", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/GetMyMetadataRespo" +
            "nse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> GetMyMetadataAsync(string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadata", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataIn" +
            "foShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string RetrieveMetadata(string[] userIds, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadata", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataRe" +
            "sponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> RetrieveMetadataAsync(string[] userIds, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataBy" +
            "IshUserRefs", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataBy" +
            "IshUserRefsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataBy" +
            "IshUserRefsInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string RetrieveMetadataByIshUserRefs(long[] userRefs, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataBy" +
            "IshUserRefs", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrieveMetadataBy" +
            "IshUserRefsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> RetrieveMetadataByIshUserRefsAsync(long[] userRefs, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Find", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindInfoShareFault" +
            "", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        string Find(Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Find", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlObjectList")]
        System.Threading.Tasks.Task<string> FindAsync(Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Create", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/CreateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/CreateInfoShareFau" +
            "lt", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        string Create(string userName, string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Create", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/CreateResponse")]
        System.Threading.Tasks.Task<string> CreateAsync(string userName, string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Update", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/UpdateInfoShareFau" +
            "lt", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void Update(string userId, string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Update", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(string userId, string xmlMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Delete", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeleteInfoShareFau" +
            "lt", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void Delete(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/Delete", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/ChangePassword", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/ChangePasswordResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/ChangePasswordInfo" +
            "ShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void ChangePassword(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/ChangePassword", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/ChangePasswordResp" +
            "onse")]
        System.Threading.Tasks.Task ChangePasswordAsync(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/SetPreferences", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/SetPreferencesResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/SetPreferencesInfo" +
            "ShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void SetPreferences(string userId, string xmlPreferences);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/SetPreferences", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/SetPreferencesResp" +
            "onse")]
        System.Threading.Tasks.Task SetPreferencesAsync(string userId, string xmlPreferences);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrievePreference" +
            "s", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrievePreference" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrievePreference" +
            "sInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlPreferences")]
        string RetrievePreferences(string userId, string[] setNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrievePreference" +
            "s", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/RetrievePreference" +
            "sResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlPreferences")]
        System.Threading.Tasks.Task<string> RetrievePreferencesAsync(string userId, string[] setNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindPreferences", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindPreferencesRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindPreferencesInf" +
            "oShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlPreferences")]
        string FindPreferences(string userId, string setNameFilter, string itemNameFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindPreferences", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/FindPreferencesRes" +
            "ponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlPreferences")]
        System.Threading.Tasks.Task<string> FindPreferencesAsync(string userId, string setNameFilter, string itemNameFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeletePreference", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeletePreferenceRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.User25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeletePreferenceIn" +
            "foShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        void DeletePreference(string userId, string setName, string itemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeletePreference", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/User/DeletePreferenceRe" +
            "sponse")]
        System.Threading.Tasks.Task DeletePreferenceAsync(string userId, string setName, string itemName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserChannel : Trisoft.ISHRemote.User25ServiceReference.User, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<Trisoft.ISHRemote.User25ServiceReference.User>, Trisoft.ISHRemote.User25ServiceReference.User {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetMetadataByIshUserRef(long userRef, string xmlRequestedMetadata) {
            return base.Channel.GetMetadataByIshUserRef(userRef, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> GetMetadataByIshUserRefAsync(long userRef, string xmlRequestedMetadata) {
            return base.Channel.GetMetadataByIshUserRefAsync(userRef, xmlRequestedMetadata);
        }
        
        public string GetMetadata(string userId, string xmlRequestedMetadata) {
            return base.Channel.GetMetadata(userId, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> GetMetadataAsync(string userId, string xmlRequestedMetadata) {
            return base.Channel.GetMetadataAsync(userId, xmlRequestedMetadata);
        }
        
        public string GetMyMetadata(string xmlRequestedMetadata) {
            return base.Channel.GetMyMetadata(xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> GetMyMetadataAsync(string xmlRequestedMetadata) {
            return base.Channel.GetMyMetadataAsync(xmlRequestedMetadata);
        }
        
        public string RetrieveMetadata(string[] userIds, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveMetadata(userIds, activityFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveMetadataAsync(string[] userIds, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveMetadataAsync(userIds, activityFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string RetrieveMetadataByIshUserRefs(long[] userRefs, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveMetadataByIshUserRefs(userRefs, activityFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveMetadataByIshUserRefsAsync(long[] userRefs, Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.RetrieveMetadataByIshUserRefsAsync(userRefs, activityFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string Find(Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.Find(activityFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> FindAsync(Trisoft.ISHRemote.User25ServiceReference.ActivityFilter activityFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.FindAsync(activityFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string Create(string userName, string xmlMetadata) {
            return base.Channel.Create(userName, xmlMetadata);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(string userName, string xmlMetadata) {
            return base.Channel.CreateAsync(userName, xmlMetadata);
        }
        
        public void Update(string userId, string xmlMetadata) {
            base.Channel.Update(userId, xmlMetadata);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string userId, string xmlMetadata) {
            return base.Channel.UpdateAsync(userId, xmlMetadata);
        }
        
        public void Delete(string userId) {
            base.Channel.Delete(userId);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string userId) {
            return base.Channel.DeleteAsync(userId);
        }
        
        public void ChangePassword(string oldPassword, string newPassword) {
            base.Channel.ChangePassword(oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(oldPassword, newPassword);
        }
        
        public void SetPreferences(string userId, string xmlPreferences) {
            base.Channel.SetPreferences(userId, xmlPreferences);
        }
        
        public System.Threading.Tasks.Task SetPreferencesAsync(string userId, string xmlPreferences) {
            return base.Channel.SetPreferencesAsync(userId, xmlPreferences);
        }
        
        public string RetrievePreferences(string userId, string[] setNames) {
            return base.Channel.RetrievePreferences(userId, setNames);
        }
        
        public System.Threading.Tasks.Task<string> RetrievePreferencesAsync(string userId, string[] setNames) {
            return base.Channel.RetrievePreferencesAsync(userId, setNames);
        }
        
        public string FindPreferences(string userId, string setNameFilter, string itemNameFilter) {
            return base.Channel.FindPreferences(userId, setNameFilter, itemNameFilter);
        }
        
        public System.Threading.Tasks.Task<string> FindPreferencesAsync(string userId, string setNameFilter, string itemNameFilter) {
            return base.Channel.FindPreferencesAsync(userId, setNameFilter, itemNameFilter);
        }
        
        public void DeletePreference(string userId, string setName, string itemName) {
            base.Channel.DeletePreference(userId, setName, itemName);
        }
        
        public System.Threading.Tasks.Task DeletePreferenceAsync(string userId, string setName, string itemName) {
            return base.Channel.DeletePreferenceAsync(userId, setName, itemName);
        }
    }
}
