//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trisoft.ISHRemote.BackgroundTask25ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
    [System.SerializableAttribute()]
    public partial class InfoShareFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InfoShareErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLDetailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InfoShareErrorNumber {
            get {
                return this.InfoShareErrorNumberField;
            }
            set {
                if ((this.InfoShareErrorNumberField.Equals(value) != true)) {
                    this.InfoShareErrorNumberField = value;
                    this.RaisePropertyChanged("InfoShareErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLDetail {
            get {
                return this.XMLDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLDetailField, value) != true)) {
                    this.XMLDetailField = value;
                    this.RaisePropertyChanged("XMLDetail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="eUserFilter", Namespace="http://schemas.datacontract.org/2004/07/InfoShareWS")]
    public enum eUserFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Current = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", ConfigurationName="BackgroundTask25ServiceReference.BackgroundTask")]
    public interface BackgroundTask {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskWithStartAfter", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskWithStartAfterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.BackgroundTask25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskWithStartAfterInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterResponse CreateBackgroundTaskWithStartAfter(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskWithStartAfter", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskWithStartAfterResponse")]
        System.Threading.Tasks.Task<Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterResponse> CreateBackgroundTaskWithStartAfterAsync(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTask", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.BackgroundTask25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskResponse CreateBackgroundTask(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTask", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/CreateBa" +
            "ckgroundTaskResponse")]
        System.Threading.Tasks.Task<Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskResponse> CreateBackgroundTaskAsync(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Find", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/FindResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.BackgroundTask25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/FindInfo" +
            "ShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        string Find(System.DateTime modifiedSince, Trisoft.ISHRemote.BackgroundTask25ServiceReference.eUserFilter userFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Find", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/FindResp" +
            "onse")]
        System.Threading.Tasks.Task<string> FindAsync(System.DateTime modifiedSince, Trisoft.ISHRemote.BackgroundTask25ServiceReference.eUserFilter userFilter, string xmlMetadataFilter, string xmlRequestedMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Retrieve" +
            "DataObjectByIshDataRefs", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Retrieve" +
            "DataObjectByIshDataRefsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trisoft.ISHRemote.BackgroundTask25ServiceReference.InfoShareFault), Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Retrieve" +
            "DataObjectByIshDataRefsInfoShareFault", Name="InfoShareFault", Namespace="http://sdl.com/trisoft/2012/06/WebServices/Contracts/Faults/API25/")]
        string RetrieveDataObjectByIshDataRefs(long[] ishDataRefs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Retrieve" +
            "DataObjectByIshDataRefs", ReplyAction="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/BackgroundTask/Retrieve" +
            "DataObjectByIshDataRefsResponse")]
        System.Threading.Tasks.Task<string> RetrieveDataObjectByIshDataRefsAsync(long[] ishDataRefs);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateBackgroundTaskWithStartAfter", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class CreateBackgroundTaskWithStartAfterRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public string eventType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public byte[] inputData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=2)]
        public long progressId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=3)]
        public string hashId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=4)]
        public System.DateTime startAfter;
        
        public CreateBackgroundTaskWithStartAfterRequest() {
        }
        
        public CreateBackgroundTaskWithStartAfterRequest(string eventType, byte[] inputData, long progressId, string hashId, System.DateTime startAfter) {
            this.eventType = eventType;
            this.inputData = inputData;
            this.progressId = progressId;
            this.hashId = hashId;
            this.startAfter = startAfter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateBackgroundTaskWithStartAfterResponse", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class CreateBackgroundTaskWithStartAfterResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public long CreateBackgroundTaskWithStartAfterResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public long progressId;
        
        public CreateBackgroundTaskWithStartAfterResponse() {
        }
        
        public CreateBackgroundTaskWithStartAfterResponse(long CreateBackgroundTaskWithStartAfterResult, long progressId) {
            this.CreateBackgroundTaskWithStartAfterResult = CreateBackgroundTaskWithStartAfterResult;
            this.progressId = progressId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateBackgroundTask", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class CreateBackgroundTaskRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public string eventType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public byte[] inputData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=2)]
        public long progressId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=3)]
        public string hashId;
        
        public CreateBackgroundTaskRequest() {
        }
        
        public CreateBackgroundTaskRequest(string eventType, byte[] inputData, long progressId, string hashId) {
            this.eventType = eventType;
            this.inputData = inputData;
            this.progressId = progressId;
            this.hashId = hashId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateBackgroundTaskResponse", WrapperNamespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", IsWrapped=true)]
    public partial class CreateBackgroundTaskResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=0)]
        public long CreateBackgroundTaskResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://sdl.com/trisoft/2012/06/WebServices/Services/API25/", Order=1)]
        public long progressId;
        
        public CreateBackgroundTaskResponse() {
        }
        
        public CreateBackgroundTaskResponse(long CreateBackgroundTaskResult, long progressId) {
            this.CreateBackgroundTaskResult = CreateBackgroundTaskResult;
            this.progressId = progressId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BackgroundTaskChannel : Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackgroundTaskClient : System.ServiceModel.ClientBase<Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask>, Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask {
        
        public BackgroundTaskClient() {
        }
        
        public BackgroundTaskClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BackgroundTaskClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackgroundTaskClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackgroundTaskClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterResponse Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask.CreateBackgroundTaskWithStartAfter(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterRequest request) {
            return base.Channel.CreateBackgroundTaskWithStartAfter(request);
        }
        
        public long CreateBackgroundTaskWithStartAfter(string eventType, byte[] inputData, ref long progressId, string hashId, System.DateTime startAfter) {
            Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterRequest inValue = new Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterRequest();
            inValue.eventType = eventType;
            inValue.inputData = inputData;
            inValue.progressId = progressId;
            inValue.hashId = hashId;
            inValue.startAfter = startAfter;
            Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterResponse retVal = ((Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask)(this)).CreateBackgroundTaskWithStartAfter(inValue);
            progressId = retVal.progressId;
            return retVal.CreateBackgroundTaskWithStartAfterResult;
        }
        
        public System.Threading.Tasks.Task<Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterResponse> CreateBackgroundTaskWithStartAfterAsync(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskWithStartAfterRequest request) {
            return base.Channel.CreateBackgroundTaskWithStartAfterAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskResponse Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask.CreateBackgroundTask(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskRequest request) {
            return base.Channel.CreateBackgroundTask(request);
        }
        
        public long CreateBackgroundTask(string eventType, byte[] inputData, ref long progressId, string hashId) {
            Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskRequest inValue = new Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskRequest();
            inValue.eventType = eventType;
            inValue.inputData = inputData;
            inValue.progressId = progressId;
            inValue.hashId = hashId;
            Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskResponse retVal = ((Trisoft.ISHRemote.BackgroundTask25ServiceReference.BackgroundTask)(this)).CreateBackgroundTask(inValue);
            progressId = retVal.progressId;
            return retVal.CreateBackgroundTaskResult;
        }
        
        public System.Threading.Tasks.Task<Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskResponse> CreateBackgroundTaskAsync(Trisoft.ISHRemote.BackgroundTask25ServiceReference.CreateBackgroundTaskRequest request) {
            return base.Channel.CreateBackgroundTaskAsync(request);
        }
        
        public string Find(System.DateTime modifiedSince, Trisoft.ISHRemote.BackgroundTask25ServiceReference.eUserFilter userFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.Find(modifiedSince, userFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public System.Threading.Tasks.Task<string> FindAsync(System.DateTime modifiedSince, Trisoft.ISHRemote.BackgroundTask25ServiceReference.eUserFilter userFilter, string xmlMetadataFilter, string xmlRequestedMetadata) {
            return base.Channel.FindAsync(modifiedSince, userFilter, xmlMetadataFilter, xmlRequestedMetadata);
        }
        
        public string RetrieveDataObjectByIshDataRefs(long[] ishDataRefs) {
            return base.Channel.RetrieveDataObjectByIshDataRefs(ishDataRefs);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveDataObjectByIshDataRefsAsync(long[] ishDataRefs) {
            return base.Channel.RetrieveDataObjectByIshDataRefsAsync(ishDataRefs);
        }
    }
}
